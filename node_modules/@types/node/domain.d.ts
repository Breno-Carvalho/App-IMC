declare module "domain" {
<<<<<<< HEAD
    import * as events from "events";

    class Domain extends events.EventEmitter implements NodeJS.Domain {
        run<T>(fn: (...args: any[]) => T, ...args: any[]): T;
        add(emitter: events.EventEmitter | NodeJS.Timer): void;
        remove(emitter: events.EventEmitter | NodeJS.Timer): void;
        bind<T extends Function>(cb: T): T;
        intercept<T extends Function>(cb: T): T;
        members: Array<events.EventEmitter | NodeJS.Timer>;
=======
    import { EventEmitter } from "events";

    global {
        namespace NodeJS {
            interface Domain extends EventEmitter {
                run<T>(fn: (...args: any[]) => T, ...args: any[]): T;
                add(emitter: EventEmitter | Timer): void;
                remove(emitter: EventEmitter | Timer): void;
                bind<T extends Function>(cb: T): T;
                intercept<T extends Function>(cb: T): T;
            }
        }
    }

    interface Domain extends NodeJS.Domain {}
    class Domain extends EventEmitter {
        members: Array<EventEmitter | NodeJS.Timer>;
>>>>>>> 0d6b74da960801e8c81785ea3d7d99af450091f5
        enter(): void;
        exit(): void;
    }

    function create(): Domain;
}
